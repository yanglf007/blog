<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.myblog.*"/>

    <context:annotation-config/>

    <!--配置数据源属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <tx:annotation-driven/>

    <!-- 扫描mapper接口，spring自动查找其下的类-->


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.myblog.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- sql session factory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置扫描Domain的包路径-->
        <property name="typeAliasesPackage" value="com.myblog.model"/>
        <!-- 配置mybatis配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--配置扫描Mapper xml的位置-->
        <property name="mapperLocations">
            <array>
                <value>classpath:mapper/*.xml</value>
            </array>
        </property>
    </bean>

<!--
    <beans profile="develop">
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbc.url_dev}"/>
            <property name="username" value="${jdbc.username_dev}"/>
            <property name="password" value="${jdbc.password_dev}"/>
            <property name="driverClassName" value="${jdbc.driverClassName}"/>
            <property name="initialSize" value="1"/>
            <property name="maxIdle" value="1"/>
            <property name="maxActive" value="20"/>
            <property name="maxWait" value="60000"/>
            &lt;!&ndash; 配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位毫秒级&ndash;&gt;
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>

            &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <property name="validationQuery" value="SELECT 'x'"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>

            &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
            <property name="poolPreparedStatements" value="true"/>
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>



        </bean>
    </beans>
-->

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url_dev}"/>
        <property name="user" value="${jdbc.username_dev}"/>
        <property name="password" value="${jdbc.password_dev}"/>
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <property name="autoCommitOnClose" value="false"/>
        <property name="checkoutTimeout" value="20000"/>
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

</beans>
